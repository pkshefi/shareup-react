{"ast":null,"code":"import axios from 'axios';\nimport AuthService from './auth.services';\nconst USER_API_BASE_URL = 'http://localhost:8080/api/v1/groups';\nlet authAxios = null;\n\nconst authenticate = () => {\n  if (AuthService.getCurrentUser()) {\n    authAxios = axios.create({\n      baseURL: 'http://192.168.100.2:8080/api/v1/groups',\n      headers: {\n        'Authorization': `Bearer ${AuthService.getCurrentUser().jwt}`,\n        'Access-Control-Allow-Origin': \"*\"\n      }\n    });\n  } else {\n    authAxios = axios.create({\n      baseURL: 'http://192.168.100.2:8080/api/v1/groups'\n    });\n  }\n};\n\nauthenticate();\n\nclass GroupService {\n  constructor() {\n    this.createGroup = async (uid, formdata) => {\n      const result = await authAxios.post(`/${uid}/create`, formdata);\n      return result;\n    };\n\n    this.getAllGroups = async () => {\n      authenticate();\n      const result = await authAxios.get('');\n      return result;\n    };\n\n    this.getGroupById = async id => {\n      const result = await authAxios.get(`/id/${id}`);\n      return result;\n    };\n\n    this.getGroupByCurrentUser = async email => {\n      const result = await authAxios.get(`/email/${email}`);\n      return result;\n    };\n\n    this.getGroupsPostsById = async id => {\n      const result = await authAxios.get(`/posts/${id}`);\n      return result;\n    };\n\n    this.joinGroup = async (uid, gid) => {\n      const result = await authAxios.post(`/${uid}/join/${gid}`);\n      return result;\n    };\n\n    this.leaveGroup = async (uid, gid) => {\n      const result = await authAxios.delete(`/${uid}/leave/${gid}`);\n      return result;\n    };\n  }\n\n}\n\nexport default new GroupService();","map":{"version":3,"sources":["/Users/mohammedshafeeq/Downloads/Shareup-Project-main/Shareup-react/shareup-react/src/services/GroupService.js"],"names":["axios","AuthService","USER_API_BASE_URL","authAxios","authenticate","getCurrentUser","create","baseURL","headers","jwt","GroupService","createGroup","uid","formdata","result","post","getAllGroups","get","getGroupById","id","getGroupByCurrentUser","email","getGroupsPostsById","joinGroup","gid","leaveGroup","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AAEA,MAAMC,iBAAiB,GAAG,qCAA1B;AACA,IAAIC,SAAS,GAAG,IAAhB;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACvB,MAAGH,WAAW,CAACI,cAAZ,EAAH,EAAgC;AAC5BF,IAAAA,SAAS,GAAGH,KAAK,CAACM,MAAN,CAAa;AACrBC,MAAAA,OAAO,EAAE,yCADY;AAErBC,MAAAA,OAAO,EAAE;AACL,yBAAkB,UAASP,WAAW,CAACI,cAAZ,GAA6BI,GAAI,EADvD;AAEL,uCAA+B;AAF1B;AAFY,KAAb,CAAZ;AAOH,GARD,MAQK;AACDN,IAAAA,SAAS,GAAGH,KAAK,CAACM,MAAN,CAAa;AACrBC,MAAAA,OAAO,EAAE;AADY,KAAb,CAAZ;AAGH;AACJ,CAdD;;AAeAH,YAAY;;AAEZ,MAAMM,YAAN,CAAmB;AAAA;AAAA,SACfC,WADe,GACD,OAAOC,GAAP,EAAYC,QAAZ,KAAyB;AACnC,YAAMC,MAAM,GAAG,MAAMX,SAAS,CAACY,IAAV,CAAgB,IAAGH,GAAI,SAAvB,EAAgCC,QAAhC,CAArB;AACA,aAAOC,MAAP;AACH,KAJc;;AAAA,SAMfE,YANe,GAMA,YAAY;AACvBZ,MAAAA,YAAY;AACZ,YAAMU,MAAM,GAAG,MAAMX,SAAS,CAACc,GAAV,CAAc,EAAd,CAArB;AACA,aAAOH,MAAP;AACH,KAVc;;AAAA,SAYfI,YAZe,GAYA,MAAOC,EAAP,IAAc;AACzB,YAAML,MAAM,GAAG,MAAMX,SAAS,CAACc,GAAV,CAAe,OAAME,EAAG,EAAxB,CAArB;AACA,aAAOL,MAAP;AACH,KAfc;;AAAA,SAiBfM,qBAjBe,GAiBS,MAAOC,KAAP,IAAiB;AACrC,YAAMP,MAAM,GAAG,MAAMX,SAAS,CAACc,GAAV,CAAe,UAASI,KAAM,EAA9B,CAArB;AACA,aAAOP,MAAP;AACH,KApBc;;AAAA,SAsBfQ,kBAtBe,GAsBM,MAAOH,EAAP,IAAc;AAC/B,YAAML,MAAM,GAAG,MAAMX,SAAS,CAACc,GAAV,CAAe,UAASE,EAAG,EAA3B,CAArB;AACA,aAAOL,MAAP;AACH,KAzBc;;AAAA,SA2BfS,SA3Be,GA2BH,OAAOX,GAAP,EAAYY,GAAZ,KAAoB;AAC5B,YAAMV,MAAM,GAAG,MAAMX,SAAS,CAACY,IAAV,CAAgB,IAAGH,GAAI,SAAQY,GAAI,EAAnC,CAArB;AACA,aAAOV,MAAP;AACH,KA9Bc;;AAAA,SAgCfW,UAhCe,GAgCF,OAAOb,GAAP,EAAYY,GAAZ,KAAoB;AAC7B,YAAMV,MAAM,GAAG,MAAMX,SAAS,CAACuB,MAAV,CAAkB,IAAGd,GAAI,UAASY,GAAI,EAAtC,CAArB;AACA,aAAOV,MAAP;AACH,KAnCc;AAAA;;AAAA;;AAsCnB,eAAe,IAAIJ,YAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\nimport AuthService from './auth.services';\r\n\r\nconst USER_API_BASE_URL = 'http://localhost:8080/api/v1/groups'\r\nlet authAxios = null;\r\n\r\nconst authenticate = () => {\r\n    if(AuthService.getCurrentUser()){\r\n        authAxios = axios.create({\r\n            baseURL: 'http://192.168.100.2:8080/api/v1/groups',\r\n            headers: {\r\n                'Authorization': `Bearer ${AuthService.getCurrentUser().jwt}`,\r\n                'Access-Control-Allow-Origin': \"*\"\r\n            }\r\n        })\r\n    }else{\r\n        authAxios = axios.create({\r\n            baseURL: 'http://192.168.100.2:8080/api/v1/groups'\r\n        })\r\n    }\r\n}\r\nauthenticate();\r\n\r\nclass GroupService {\r\n    createGroup = async (uid, formdata) => {\r\n        const result = await authAxios.post(`/${uid}/create`,formdata)\r\n        return result;\r\n    }\r\n\r\n    getAllGroups = async () => {\r\n        authenticate();\r\n        const result = await authAxios.get('')\r\n        return result;\r\n    }\r\n\r\n    getGroupById = async (id) => {\r\n        const result = await authAxios.get(`/id/${id}`)\r\n        return result;\r\n    }\r\n\r\n    getGroupByCurrentUser = async (email) => {\r\n        const result = await authAxios.get(`/email/${email}`)\r\n        return result;\r\n    }\r\n\r\n    getGroupsPostsById = async (id) => {\r\n        const result = await authAxios.get(`/posts/${id}`)\r\n        return result;\r\n    }\r\n\r\n    joinGroup = async (uid, gid) => {\r\n        const result = await authAxios.post(`/${uid}/join/${gid}`)\r\n        return result\r\n    }\r\n\r\n    leaveGroup = async (uid, gid) => {\r\n        const result = await authAxios.delete(`/${uid}/leave/${gid}`)\r\n        return result\r\n    }\r\n}\r\n\r\nexport default new GroupService();"]},"metadata":{},"sourceType":"module"}