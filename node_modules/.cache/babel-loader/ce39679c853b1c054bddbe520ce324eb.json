{"ast":null,"code":"import axios from 'axios';\nimport AuthService from './auth.services';\nlet authAxios = null;\n\nconst authenticate = () => {\n  if (AuthService.getCurrentUser()) {\n    authAxios = axios.create({\n      baseURL: 'http://192.168.100.2:8080/api/v1/',\n      headers: {\n        Authorization: `Bearer ${AuthService.getCurrentUser().jwt}`\n      }\n    });\n  } else {\n    authAxios = axios.create({\n      baseURL: 'http://192.168.100.2:8080/api/v1/'\n    });\n  }\n};\n\nauthenticate();\n\nclass PostService {\n  constructor() {\n    this.getPost = async () => {\n      authenticate();\n      const result = await authAxios.get('posts/');\n      return result;\n    };\n\n    this.getPostForUser = async email => {\n      authenticate();\n      const result = await authAxios.get(`posts/${email}`);\n      return result;\n    };\n\n    this.getSavedPostForUser = async email => {\n      authenticate();\n      const result = await authAxios.get(`posts/${email}/saved_posts`);\n      return result;\n    };\n\n    this.createPost = async (userId, formdata, userTagId) => {\n      const result = await authAxios.post(`posts/${userId}`, formdata, {\n        params: {\n          userTagId\n        }\n      });\n      return result;\n    };\n\n    this.updatePost = async (postId, post) => {\n      const result = await authAxios.put(`posts/${postId}`, post);\n      return result;\n    };\n\n    this.deletePost = async postid => {\n      const result = await authAxios.delete(`posts/${postid}`);\n      return result;\n    };\n\n    this.addComment = async (userid, postid, comment) => {\n      const result = await authAxios.post(`comment/${userid}/${postid}`, comment);\n      return result;\n    };\n\n    this.deleteComment = async commentid => {\n      const result = await authAxios.delete(`comment/${commentid}`);\n      return result;\n    };\n  }\n\n}\n\nexport default new PostService();","map":{"version":3,"sources":["/Users/mohammedshafeeq/Downloads/Shareup-Project-main/Shareup-react/shareup-react/src/services/PostService.js"],"names":["axios","AuthService","authAxios","authenticate","getCurrentUser","create","baseURL","headers","Authorization","jwt","PostService","getPost","result","get","getPostForUser","email","getSavedPostForUser","createPost","userId","formdata","userTagId","post","params","updatePost","postId","put","deletePost","postid","delete","addComment","userid","comment","deleteComment","commentid"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AAEA,IAAIC,SAAS,GAAG,IAAhB;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACvB,MAAGF,WAAW,CAACG,cAAZ,EAAH,EAAgC;AAC5BF,IAAAA,SAAS,GAAGF,KAAK,CAACK,MAAN,CAAa;AACrBC,MAAAA,OAAO,EAAE,mCADY;AAErBC,MAAAA,OAAO,EAAE;AAELC,QAAAA,aAAa,EAAG,UAASP,WAAW,CAACG,cAAZ,GAA6BK,GAAI;AAFrD;AAFY,KAAb,CAAZ;AAOH,GARD,MAQK;AACDP,IAAAA,SAAS,GAAGF,KAAK,CAACK,MAAN,CAAa;AACrBC,MAAAA,OAAO,EAAE;AADY,KAAb,CAAZ;AAGH;AACJ,CAdD;;AAeAH,YAAY;;AAEZ,MAAMO,WAAN,CAAkB;AAAA;AAAA,SACdC,OADc,GACJ,YAAY;AAClBR,MAAAA,YAAY;AACZ,YAAMS,MAAM,GAAG,MAAMV,SAAS,CAACW,GAAV,CAAc,QAAd,CAArB;AACA,aAAOD,MAAP;AACH,KALa;;AAAA,SAadE,cAbc,GAaG,MAAOC,KAAP,IAAiB;AAC9BZ,MAAAA,YAAY;AACZ,YAAMS,MAAM,GAAG,MAAMV,SAAS,CAACW,GAAV,CAAe,SAAQE,KAAM,EAA7B,CAArB;AACA,aAAOH,MAAP;AACH,KAjBa;;AAAA,SAmBdI,mBAnBc,GAmBQ,MAAOD,KAAP,IAAiB;AACnCZ,MAAAA,YAAY;AACZ,YAAMS,MAAM,GAAG,MAAMV,SAAS,CAACW,GAAV,CAAe,SAAQE,KAAM,cAA7B,CAArB;AACA,aAAOH,MAAP;AACH,KAvBa;;AAAA,SAyBdK,UAzBc,GAyBD,OAAOC,MAAP,EAAeC,QAAf,EAAyBC,SAAzB,KAAuC;AAChD,YAAMR,MAAM,GAAG,MAAMV,SAAS,CAACmB,IAAV,CAAgB,SAAQH,MAAO,EAA/B,EAAiCC,QAAjC,EAA2C;AAAEG,QAAAA,MAAM,EAAE;AAAEF,UAAAA;AAAF;AAAV,OAA3C,CAArB;AACA,aAAOR,MAAP;AACH,KA5Ba;;AAAA,SA8BdW,UA9Bc,GA8BD,OAAOC,MAAP,EAAeH,IAAf,KAAwB;AACjC,YAAMT,MAAM,GAAG,MAAMV,SAAS,CAACuB,GAAV,CAAe,SAAQD,MAAO,EAA9B,EAAiCH,IAAjC,CAArB;AACA,aAAOT,MAAP;AACH,KAjCa;;AAAA,SAmCdc,UAnCc,GAmCD,MAAOC,MAAP,IAAkB;AAC3B,YAAMf,MAAM,GAAG,MAAMV,SAAS,CAAC0B,MAAV,CAAkB,SAAQD,MAAO,EAAjC,CAArB;AACA,aAAOf,MAAP;AACH,KAtCa;;AAAA,SAwCdiB,UAxCc,GAwCD,OAAOC,MAAP,EAAeH,MAAf,EAAuBI,OAAvB,KAAmC;AAC5C,YAAMnB,MAAM,GAAG,MAAMV,SAAS,CAACmB,IAAV,CAAgB,WAAUS,MAAO,IAAGH,MAAO,EAA3C,EAA8CI,OAA9C,CAArB;AACA,aAAOnB,MAAP;AACH,KA3Ca;;AAAA,SA6CdoB,aA7Cc,GA6CE,MAAOC,SAAP,IAAqB;AACjC,YAAMrB,MAAM,GAAG,MAAMV,SAAS,CAAC0B,MAAV,CAAkB,WAAUK,SAAU,EAAtC,CAArB;AACA,aAAOrB,MAAP;AACH,KAhDa;AAAA;;AAAA;;AAmDlB,eAAe,IAAIF,WAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\nimport AuthService from './auth.services';\r\n\r\nlet authAxios = null;\r\n\r\nconst authenticate = () => {\r\n    if(AuthService.getCurrentUser()){\r\n        authAxios = axios.create({\r\n            baseURL: 'http://192.168.100.2:8080/api/v1/',\r\n            headers: {\r\n                \r\n                Authorization: `Bearer ${AuthService.getCurrentUser().jwt}`\r\n            }\r\n        })\r\n    }else{\r\n        authAxios = axios.create({\r\n            baseURL: 'http://192.168.100.2:8080/api/v1/'\r\n        })\r\n    }\r\n}\r\nauthenticate();\r\n\r\nclass PostService {\r\n    getPost = async () => {\r\n        authenticate();\r\n        const result = await authAxios.get('posts/')\r\n        return result;\r\n    }\r\n\r\n    // getPostForUser = async (id) => {\r\n    //     authenticate();\r\n    //     const result = await authAxios.get(`posts/${id}`)\r\n    //     return result;\r\n    // }\r\n\r\n    getPostForUser = async (email) => {\r\n        authenticate();\r\n        const result = await authAxios.get(`posts/${email}`)\r\n        return result;\r\n    }\r\n\r\n    getSavedPostForUser = async (email) => {\r\n        authenticate();\r\n        const result = await authAxios.get(`posts/${email}/saved_posts`)\r\n        return result;\r\n    }\r\n\r\n    createPost = async (userId, formdata, userTagId) => {\r\n        const result = await authAxios.post(`posts/${userId}`,formdata, { params: { userTagId }})\r\n        return result\r\n    }\r\n\r\n    updatePost = async (postId, post) => {\r\n        const result = await authAxios.put(`posts/${postId}`, post)\r\n        return result;\r\n    }\r\n\r\n    deletePost = async (postid) => {\r\n        const result = await authAxios.delete(`posts/${postid}`)\r\n        return result\r\n    }\r\n\r\n    addComment = async (userid, postid, comment) => {\r\n        const result = await authAxios.post(`comment/${userid}/${postid}`, comment)\r\n        return result\r\n    }\r\n\r\n    deleteComment = async (commentid) => {\r\n        const result = await authAxios.delete(`comment/${commentid}`)\r\n        return result\r\n    }\r\n}\r\n\r\nexport default new PostService();"]},"metadata":{},"sourceType":"module"}