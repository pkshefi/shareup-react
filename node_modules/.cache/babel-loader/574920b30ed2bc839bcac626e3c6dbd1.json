{"ast":null,"code":"import axios from 'axios';\nimport AuthService from './auth.services';\nconst USER_API_BASE_URL = 'http://192.168.100.239:8080/api/v1/users';\nconst servers_api = 'http://192.168.100.2:8080';\nconst my_api = 'http://192.168.100.2:8080';\nlet authAxios = null;\n\nconst authenticate = () => {\n  if (AuthService.getCurrentUser()) {\n    authAxios = axios.create({\n      baseURL: `${my_api}/api/v1/`,\n      headers: {\n        'Authorization': `Bearer ${AuthService.getCurrentUser().jwt}`,\n        'Access-Control-Allow-Origin': \"*\"\n      }\n    });\n  } else {\n    authAxios = axios.create({\n      baseURL: `${my_api}/api/v1/`\n    });\n  }\n};\n\nauthenticate();\n\nclass UserService {\n  constructor() {\n    this.getUsers = async () => {\n      const result = await authAxios.get('users/');\n      return result;\n    };\n\n    this.createUser = async user => {\n      const result = await axios.post('http://192.168.100.2:8080/api/v1/users/', user);\n      return result;\n    };\n\n    this.editProfile = async (email, user) => {\n      const result = await authAxios.put(`users/${email}/edit_profile`, user);\n      return result;\n    };\n\n    this.getUserByEmail = async email => {\n      authenticate();\n      const result = await authAxios.get('users/email/' + email);\n      return result;\n    };\n\n    this.getFriends = async email => {\n      const result = await authAxios.get('/friends/' + email);\n      return result;\n    };\n\n    this.getFollowers = async email => {\n      const result = await authAxios.get(`${email}/followers`);\n      return result;\n    };\n\n    this.getFollowing = async email => {\n      const result = await authAxios.get(`${email}/following`);\n      return result;\n    };\n\n    this.getFriendRequestSent = async email => {\n      const result = await authAxios.get(`${email}/friend_request_sent`);\n      return result;\n    };\n\n    this.getFriendRequestRecieved = async email => {\n      const result = await authAxios.get(`${email}/friend_request_recieved`);\n      return result;\n    };\n\n    this.follow = async (email, followed_id) => {\n      const result = await authAxios.post(`${email}/follows/${followed_id}`);\n      return result;\n    };\n\n    this.unfollow = async (email, followed_id) => {\n      const result = await authAxios.delete(`${email}/unfollow/${followed_id}`);\n      return result;\n    };\n\n    this.uploadProfilePicture = async (email, formdata) => {\n      const result = await authAxios.post(`users/${email}/upload_profile_picture`, formdata);\n      return result;\n    };\n\n    this.uploadCoverPicture = async (email, formdata) => {\n      const result = await authAxios.post(`users/${email}/upload_cover_picture`, formdata);\n      return result;\n    };\n\n    this.likePost = async (uid, pid) => {\n      const result = await authAxios.put(`/posts/${uid}/like-unlike/${pid}`, {\n        emoji: \"like\"\n      });\n      return result;\n    };\n\n    this.savePost = async (uid, pid) => {\n      const result = await authAxios.put(`/posts/${uid}/save-unsave/${pid}`);\n      return result;\n    };\n\n    this.likeSwap = async (uid, sid) => {\n      const result = await authAxios.put(`/swaps/${uid}/like-unlike/${sid}`, {\n        emoji: \"like\"\n      });\n      return result;\n    };\n  } // saveSwap = async (uid,sid) => {\n  //     const result = await authAxios.put(`/swaps/${uid}/save-unsave/${sid}`)\n  //     return result\n  // }\n\n\n}\n\nexport default new UserService();","map":{"version":3,"sources":["/Users/mohammedshafeeq/Downloads/Shareup-Project-main/Shareup-react/shareup-react/src/services/UserService.js"],"names":["axios","AuthService","USER_API_BASE_URL","servers_api","my_api","authAxios","authenticate","getCurrentUser","create","baseURL","headers","jwt","UserService","getUsers","result","get","createUser","user","post","editProfile","email","put","getUserByEmail","getFriends","getFollowers","getFollowing","getFriendRequestSent","getFriendRequestRecieved","follow","followed_id","unfollow","delete","uploadProfilePicture","formdata","uploadCoverPicture","likePost","uid","pid","emoji","savePost","likeSwap","sid"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport AuthService from './auth.services';\r\n\r\nconst USER_API_BASE_URL = 'http://192.168.100.239:8080/api/v1/users'\r\nconst servers_api = 'http://192.168.100.2:8080'\r\nconst my_api = 'http://192.168.100.2:8080'\r\nlet authAxios = null;\r\n\r\nconst authenticate = () => {\r\n    if(AuthService.getCurrentUser()){\r\n        authAxios = axios.create({\r\n            baseURL: `${my_api}/api/v1/`,\r\n            headers: {\r\n                'Authorization': `Bearer ${AuthService.getCurrentUser().jwt}`,\r\n                'Access-Control-Allow-Origin': \"*\"\r\n            }\r\n        })\r\n    }else{\r\n        authAxios = axios.create({\r\n            baseURL: `${my_api}/api/v1/`\r\n        })\r\n    }\r\n}\r\nauthenticate();\r\n\r\nclass UserService {\r\n    getUsers = async () => {\r\n        const result = await authAxios.get('users/')\r\n        return result;\r\n    }\r\n\r\n    createUser = async (user) => {\r\n        const result = await axios.post('http://192.168.100.2:8080/api/v1/users/', user)\r\n        return result;\r\n    }\r\n\r\n    editProfile = async (email, user) => {\r\n        const result = await authAxios.put(`users/${email}/edit_profile`,user)\r\n        return result\r\n    }\r\n\r\n    // handleLogin = async (user) => {\r\n    //     const result = await authAxios.post\r\n    //     return axios.post(USER_API_BASE_URL+'/authenticate', user , {withCredentials: true})\r\n    // }\r\n\r\n    getUserByEmail = async (email) => {\r\n        authenticate();\r\n        const result = await authAxios.get('users/email/' + email)\r\n        return result;\r\n    }\r\n\r\n    // addFriends = asyny (uid, fid) => {\r\n\r\n    // }\r\n\r\n    getFriends = async (email) => {\r\n        const result = await authAxios.get('/friends/' + email)\r\n        return result\r\n    }\r\n\r\n    getFollowers = async (email) => {\r\n        const result = await authAxios.get(`${email}/followers`)\r\n        return result\r\n    }\r\n\r\n    getFollowing = async (email) => {\r\n        const result = await authAxios.get(`${email}/following`)\r\n        return result\r\n    }\r\n\r\n    getFriendRequestSent = async (email) => {\r\n        const result = await authAxios.get(`${email}/friend_request_sent`)\r\n        return result\r\n    }\r\n\r\n    getFriendRequestRecieved = async (email) => {\r\n        const result = await authAxios.get(`${email}/friend_request_recieved`)\r\n        return result\r\n    }\r\n\r\n    follow = async (email,followed_id) => {\r\n        const result = await authAxios.post(`${email}/follows/${followed_id}`)\r\n        return result\r\n    }\r\n\r\n    unfollow = async (email,followed_id) => {\r\n        const result = await authAxios.delete(`${email}/unfollow/${followed_id}`)\r\n        return result\r\n    }\r\n\r\n    uploadProfilePicture = async (email, formdata) => {\r\n        const result = await authAxios.post(`users/${email}/upload_profile_picture`,formdata)\r\n        return result\r\n    }\r\n\r\n    uploadCoverPicture = async (email, formdata) => {\r\n        const result = await authAxios.post(`users/${email}/upload_cover_picture`,formdata)\r\n        return result\r\n    }\r\n\r\n    likePost = async (uid,pid) => {\r\n        const result = await authAxios.put(`/posts/${uid}/like-unlike/${pid}`,{emoji:\"like\"})\r\n        return result\r\n    }\r\n\r\n    savePost = async (uid,pid) => {\r\n        const result = await authAxios.put(`/posts/${uid}/save-unsave/${pid}`)\r\n        return result\r\n    }\r\n    likeSwap = async (uid,sid) => {\r\n        const result = await authAxios.put(`/swaps/${uid}/like-unlike/${sid}`,{emoji:\"like\"})\r\n        return result\r\n    }\r\n\r\n    // saveSwap = async (uid,sid) => {\r\n    //     const result = await authAxios.put(`/swaps/${uid}/save-unsave/${sid}`)\r\n    //     return result\r\n    // }\r\n    \r\n}\r\n\r\nexport default new UserService();"]},"metadata":{},"sourceType":"module"}