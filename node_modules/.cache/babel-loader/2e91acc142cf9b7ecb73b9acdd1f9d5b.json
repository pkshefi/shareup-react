{"ast":null,"code":"import axios from 'axios';\nimport AuthService from './auth.services';\nconst USER_API_BASE_URL = 'http://192.168.100.2:8080/api/v1/friends';\nlet authAxios = null;\n\nconst authenticate = () => {\n  if (AuthService.getCurrentUser()) {\n    authAxios = axios.create({\n      baseURL: 'http://192.168.100.2:8080/api/v1/',\n      headers: {\n        'Authorization': `Bearer ${AuthService.getCurrentUser().jwt}`,\n        'Access-Control-Allow-Origin': \"*\"\n      }\n    });\n  } else {\n    authAxios = axios.create({\n      baseURL: 'http://192.168.100.2:8080/api/v1/'\n    });\n  }\n};\n\nauthenticate();\n\nclass FriendService {\n  constructor() {\n    this.getFriends = async email => {\n      authenticate();\n      const result = await authAxios.get('/friends/' + email);\n      return result;\n    };\n\n    this.addFriends = async (uid, fid) => {\n      const result = await authAxios.post(`/friends/${uid}/${fid}`);\n      return result;\n    };\n\n    this.removeFriends = async (uid, fid) => {\n      const result = await authAxios.delete(`/friends/${uid}/${fid}`);\n      return result;\n    };\n\n    this.sendRequest = async (uid, fid) => {\n      const result = await authAxios.post(`/${uid}/friend_request/${fid}`);\n      return result;\n    };\n\n    this.acceptRequest = async (uid, fid) => {\n      const result = await authAxios.post(`/${uid}/accept_friend_request/${fid}`);\n      return result;\n    };\n\n    this.declineRequest = async (uid, fid) => {\n      const result = await authAxios.post(`/${uid}/decline_friend_request/${fid}`);\n      return result;\n    };\n\n    this.unsendRequest = async (uid, fid) => {\n      const result = await authAxios.post(`/${uid}/decline_friend_request/${fid}`);\n      return result;\n    };\n  }\n\n}\n\nexport default new FriendService();","map":{"version":3,"sources":["/Users/mohammedshafeeq/Downloads/Shareup-Project-main/Shareup-react/shareup-react/src/services/FriendService.js"],"names":["axios","AuthService","USER_API_BASE_URL","authAxios","authenticate","getCurrentUser","create","baseURL","headers","jwt","FriendService","getFriends","email","result","get","addFriends","uid","fid","post","removeFriends","delete","sendRequest","acceptRequest","declineRequest","unsendRequest"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AAEA,MAAMC,iBAAiB,GAAG,0CAA1B;AACA,IAAIC,SAAS,GAAG,IAAhB;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACvB,MAAGH,WAAW,CAACI,cAAZ,EAAH,EAAgC;AAC5BF,IAAAA,SAAS,GAAGH,KAAK,CAACM,MAAN,CAAa;AACrBC,MAAAA,OAAO,EAAE,mCADY;AAErBC,MAAAA,OAAO,EAAE;AACL,yBAAkB,UAASP,WAAW,CAACI,cAAZ,GAA6BI,GAAI,EADvD;AAEL,uCAA+B;AAF1B;AAFY,KAAb,CAAZ;AAOH,GARD,MAQK;AACDN,IAAAA,SAAS,GAAGH,KAAK,CAACM,MAAN,CAAa;AACrBC,MAAAA,OAAO,EAAE;AADY,KAAb,CAAZ;AAGH;AACJ,CAdD;;AAeAH,YAAY;;AAEZ,MAAMM,aAAN,CAAoB;AAAA;AAAA,SAChBC,UADgB,GACH,MAAOC,KAAP,IAAiB;AAC1BR,MAAAA,YAAY;AACZ,YAAMS,MAAM,GAAG,MAAMV,SAAS,CAACW,GAAV,CAAc,cAAcF,KAA5B,CAArB;AACA,aAAOC,MAAP;AACH,KALe;;AAAA,SAOhBE,UAPgB,GAOH,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC7B,YAAMJ,MAAM,GAAG,MAAMV,SAAS,CAACe,IAAV,CAAgB,YAAWF,GAAI,IAAGC,GAAI,EAAtC,CAArB;AACA,aAAOJ,MAAP;AACH,KAVe;;AAAA,SAYhBM,aAZgB,GAYA,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;AAChC,YAAMJ,MAAM,GAAG,MAAMV,SAAS,CAACiB,MAAV,CAAkB,YAAWJ,GAAI,IAAGC,GAAI,EAAxC,CAArB;AACA,aAAOJ,MAAP;AACH,KAfe;;AAAA,SAiBhBQ,WAjBgB,GAiBF,OAAOL,GAAP,EAAWC,GAAX,KAAmB;AAC7B,YAAMJ,MAAM,GAAG,MAAMV,SAAS,CAACe,IAAV,CAAgB,IAAGF,GAAI,mBAAkBC,GAAI,EAA7C,CAArB;AACA,aAAOJ,MAAP;AACH,KApBe;;AAAA,SAsBhBS,aAtBgB,GAsBA,OAAON,GAAP,EAAYC,GAAZ,KAAoB;AAChC,YAAMJ,MAAM,GAAG,MAAMV,SAAS,CAACe,IAAV,CAAgB,IAAGF,GAAI,0BAAyBC,GAAI,EAApD,CAArB;AACA,aAAOJ,MAAP;AACH,KAzBe;;AAAA,SA2BhBU,cA3BgB,GA2BC,OAAOP,GAAP,EAAYC,GAAZ,KAAoB;AACjC,YAAMJ,MAAM,GAAG,MAAMV,SAAS,CAACe,IAAV,CAAgB,IAAGF,GAAI,2BAA0BC,GAAI,EAArD,CAArB;AACA,aAAOJ,MAAP;AACH,KA9Be;;AAAA,SAgChBW,aAhCgB,GAgCA,OAAOR,GAAP,EAAYC,GAAZ,KAAoB;AAChC,YAAMJ,MAAM,GAAG,MAAMV,SAAS,CAACe,IAAV,CAAgB,IAAGF,GAAI,2BAA0BC,GAAI,EAArD,CAArB;AACA,aAAOJ,MAAP;AACH,KAnCe;AAAA;;AAAA;;AAsCpB,eAAe,IAAIH,aAAJ,EAAf","sourcesContent":["import axios from 'axios';\r\nimport AuthService from './auth.services';\r\n\r\nconst USER_API_BASE_URL = 'http://192.168.100.2:8080/api/v1/friends'\r\nlet authAxios = null;\r\n\r\nconst authenticate = () => {\r\n    if(AuthService.getCurrentUser()){\r\n        authAxios = axios.create({\r\n            baseURL: 'http://192.168.100.2:8080/api/v1/',\r\n            headers: {\r\n                'Authorization': `Bearer ${AuthService.getCurrentUser().jwt}`,\r\n                'Access-Control-Allow-Origin': \"*\"\r\n            }\r\n        })\r\n    }else{\r\n        authAxios = axios.create({\r\n            baseURL: 'http://192.168.100.2:8080/api/v1/'\r\n        })\r\n    }\r\n}\r\nauthenticate()\r\n\r\nclass FriendService {\r\n    getFriends = async (email) => {\r\n        authenticate()\r\n        const result = await authAxios.get('/friends/' + email)\r\n        return result\r\n    }\r\n\r\n    addFriends = async (uid, fid) => {\r\n        const result = await authAxios.post(`/friends/${uid}/${fid}`)\r\n        return result\r\n    }\r\n\r\n    removeFriends = async (uid, fid) => {\r\n        const result = await authAxios.delete(`/friends/${uid}/${fid}`)\r\n        return result\r\n    }\r\n\r\n    sendRequest = async (uid,fid) => {\r\n        const result = await authAxios.post(`/${uid}/friend_request/${fid}`)\r\n        return result\r\n    }\r\n\r\n    acceptRequest = async (uid, fid) => {\r\n        const result = await authAxios.post(`/${uid}/accept_friend_request/${fid}`)\r\n        return result\r\n    }\r\n\r\n    declineRequest = async (uid, fid) => {\r\n        const result = await authAxios.post(`/${uid}/decline_friend_request/${fid}`)\r\n        return result\r\n    }\r\n\r\n    unsendRequest = async (uid, fid) => {\r\n        const result = await authAxios.post(`/${uid}/decline_friend_request/${fid}`)\r\n        return result\r\n    }\r\n}\r\n\r\nexport default new FriendService();"]},"metadata":{},"sourceType":"module"}